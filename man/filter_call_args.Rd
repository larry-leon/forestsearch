% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summary_utility_functions.R
\name{filter_call_args}
\alias{filter_call_args}
\title{Filter and merge arguments for function calls}
\usage{
filter_call_args(source_args, target_func, override_args = NULL)
}
\arguments{
\item{source_args}{List of all arguments (typically from \code{mget()} or a stored args list).}

\item{target_func}{Function whose formals define the filter criteria.}

\item{override_args}{List of arguments to add or override (optional).}
}
\value{
List of filtered arguments ready for \code{do.call()}.
}
\description{
Simplifies the common pattern of filtering arguments from a source list
to match a target function's formal parameters, then adding/overriding specific arguments.
}
\details{
This function:
\enumerate{
\item Extracts formal parameter names from \code{target_func}
\item Keeps only arguments from \code{source_args} that match those names
\item Adds or overrides with any \code{override_args} provided
}

Reduces boilerplate and improves readability across the codebase.
}
\examples{
\dontrun{
# Instead of:
args_FS <- names(formals(get_FSdata))
args_FS_filtered <- args_call_all[names(args_call_all) \%in\% args_FS]
args_FS_filtered$df.analysis <- df.analysis
args_FS_filtered$grf_cuts <- grf_cuts
FSdata <- do.call(get_FSdata, args_FS_filtered)

# You now write:
FSdata <- do.call(get_FSdata,
  filter_call_args(args_call_all, get_FSdata,
                   list(df.analysis = df.analysis, grf_cuts = grf_cuts)))
}

}
