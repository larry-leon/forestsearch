# Load required libraries
library(forestsearch)
library(knitr)
library(DT)
library(DiagrammeR)
# Load required libraries
library(forestsearch)
library(knitr)
library(DT)
library(DiagrammeR)
rm(list=ls())
#library(devtools)
#install_github("larry-leon/forestsearch", force = TRUE)
suppressMessages(library(weightedSurv))
suppressMessages(library(forestsearch))
library(survival)
df_gbsg <- gbsg
df_gbsg$tte <- df_gbsg$rfstime / 30.4375
df_gbsg$event <- df_gbsg$status
df_gbsg$treat <- df_gbsg$hormon
df_gbsg$grade3 <- ifelse(df_gbsg$grade == "3", 1, 0)
# create id name
df_gbsg$id <- seq_len(nrow(df_gbsg))
# If missing, then created automatically
tte.name <- "tte"
event.name <- "event"
treat.name <- "treat"
id.name <- "id"
arms <- c("treat", "control")
dfcount_gbsg <- df_counting(df_gbsg, tte.name, event.name, treat.name, by.risk = 12)
par(mfrow=c(1,1))
plot_weighted_km(dfcount_gbsg, conf.int = TRUE, show.logrank = TRUE,
put.legend.lr = "topleft", ymax = 1.05, xmed.fraction = 0.65)
title(main="GBSG trial")
dfcount_gbsg <- df_counting(df_gbsg, tte.name, event.name, treat.name, by.risk = 12)
par(mfrow=c(1,1))
plot_weighted_km(dfcount_gbsg, conf.int = TRUE, show.logrank = TRUE,
put.legend.lr = "topleft", ymax = 1.05, xmed.fraction = 0.65)
title(main="GBSG trial")
# Baseline factors from which candidate subgroups are formed
confounders.name<-c("age","meno","size","grade3","nodes","pgr","er")
library(doFuture)
library(doRNG)
registerDoFuture()
registerDoRNG()
# conf_force 'forces' a specific covariate cut, eg. 'age <= 65'
system.time({fs <- forestsearch(df_gbsg,  confounders.name=confounders.name,
outcome.name = "tte", treat.name = "treat", event.name = "event", id.name = "id",
hr.threshold = 1.25, hr.consistency = 1.0, pconsistency.threshold = 0.90,
sg_focus = "hrMaxSG",
showten_subgroups = FALSE, details=TRUE,
conf_force = c("age <= 65", "er <= 0", "er <= 1", "er <= 2"," er <= 5"),
cut_type = "default", use_grf = TRUE, plot.grf = TRUE, use_lasso = TRUE,
maxk = 2, n.min = 60, d0.min = 10, d1.min = 10,
plot.sg = TRUE, by.risk = 12,
parallel_args = list(plan="multisession", workers = 12, show_message = TRUE)
)
})
res_tabs <- sg_tables(fs, ndecimals = 3)
res_tabs$sg10_out
res_tabs$tab_estimates
# Just run a few for illustration
# In practice, recommend minimum of NB = 300 to 400 re-samples
# NOTE: workers = 1 and reset_parallel_fs = FALSE will use parallel process per the above forestsearch (fs) data analysis call
# where workers are set to 12 which is the maximum on my machine;
# Also, note that if workers is set to a higher value than the max cores, this will be re-set to the maximum (max cores)
output_dir <- "results/"
save_results <- dir.exists(output_dir)
NB <- 30
t.start <- proc.time()[3]
fs_bc <- forestsearch_bootstrap_dofuture(fs.est = fs, nb_boots = NB, show_three = TRUE, details = TRUE)
print(names(fs_bc))
print(fs_bc$FSsg_tab)
t.now<-proc.time()[3]
t.min<-(t.now-t.start)/60
cat("Minutes (total) for bootstrap (boots,mins)",c(NB,t.min),"\n")
cat("Projected minutes for 1000",c(t.min*(1000/NB)),"\n")
if (save_results) {
filename <- file.path(output_dir,
paste0("bootstrap_results_B=",
format(NB),
".RData"))
save(fs_bc, fs, file = filename)
cat("\nResults saved to:", filename, "\n")
}
args(forestsearch_bootstrap_dofuture)
NB <- 30
t.start <- proc.time()[3]
fs_bc <- forestsearch_bootstrap_dofuture(fs.est = fs, nb_boots = NB, show_three = TRUE, details = TRUE, show_progress = FALSE)
print(names(fs_bc))
print(fs_bc$FSsg_tab)
sg_tab <- fs_bc$summary$table
sg_tab
fs_bc$summary$plots$combined
names(fs_bc$summary$plots)
library(cowplot)
args(forestsearch_bootstrap_dofuture)
fs_bc$summary$plots$H_distribution
library(patchwork)
NB <- 30
t.start <- proc.time()[3]
fs_bc <- forestsearch_bootstrap_dofuture(fs.est = fs, nb_boots = NB, show_three = FALSE, details = TRUE, show_progress = FALSE)
#print(names(fs_bc))
#print(fs_bc$FSsg_tab)
sg_tab <- fs_bc$summary$table
sg_tab
fs_bc$summary$plots$combined
getwd()
# Just run a few for illustration
# In practice, recommend minimum of NB = 300 to 400 re-samples
# NOTE: workers = 1 and reset_parallel_fs = FALSE will use parallel process per the above forestsearch (fs) data analysis call
# where workers are set to 12 which is the maximum on my machine;
# Also, note that if workers is set to a higher value than the max cores, this will be re-set to the maximum (max cores)
# Needed for a combined bootstrap plot (otherwise if not avaialable will not produce)
library(patchwork)
output_dir <- "Vignettes/results/"
save_results <- dir.exists(output_dir)
NB <- 50
t.start <- proc.time()[3]
fs_bc <- forestsearch_bootstrap_dofuture(fs.est = fs, nb_boots = NB, show_three = FALSE, details = TRUE, show_progress = FALSE)
#print(names(fs_bc))
#print(fs_bc$FSsg_tab)
t.now<-proc.time()[3]
t.min<-(t.now-t.start)/60
cat("Minutes (total) for bootstrap (boots,mins)",c(NB,t.min),"\n")
cat("Projected minutes for 1000",c(t.min*(1000/NB)),"\n")
if (save_results) {
filename <- file.path(output_dir,
paste0("bootstrap_results_B=",
format(NB),
".RData"))
save(fs_bc, fs, file = filename)
cat("\nResults saved to:", filename, "\n")
}
save_results
getwd()
output_dir <- "Vignettes/results/"
save_results <- dir.exists(output_dir)
save_results
output_dir <- "results/"
save_results <- dir.exists(output_dir)
save_results
if (save_results) {
filename <- file.path(output_dir,
paste0("gbsg_results_B=",
format(NB),
".RData"))
save(fs_bc, fs, file = filename)
cat("\nResults saved to:", filename, "\n")
}
load("~/Library/CloudStorage/OneDrive-MerckSharp&DohmeLLC/documents/GitHub/forestsearch/Vignettes/results/gbsg_results_B=50.RData")
load("~/Library/CloudStorage/OneDrive-MerckSharp&DohmeLLC/documents/GitHub/forestsearch/Vignettes/results/gbsg_results_B=50.RData")
sg_tab <- fs_bc$summary$table
sg_tab
fs_bc$summary$plots$combined
# Just run a few for illustration
# In practice, recommend minimum of NB = 300 to 400 re-samples
# NOTE: workers = 1 and reset_parallel_fs = FALSE will use parallel process per the above forestsearch (fs) data analysis call
# where workers are set to 12 which is the maximum on my machine;
# Also, note that if workers is set to a higher value than the max cores, this will be re-set to the maximum (max cores)
# Needed for a combined bootstrap plot (otherwise if not avaialable will not produce)
library(patchwork)
output_dir <- "results/"
save_results <- dir.exists(output_dir)
NB <- 1000
t.start <- proc.time()[3]
fs_bc <- forestsearch_bootstrap_dofuture(fs.est = fs, nb_boots = NB, show_three = FALSE, details = TRUE, show_progress = FALSE)
#print(names(fs_bc))
#print(fs_bc$FSsg_tab)
t.now<-proc.time()[3]
t.min<-(t.now-t.start)/60
cat("Minutes (total) for bootstrap (boots,mins)",c(NB,t.min),"\n")
cat("Projected minutes for 1000",c(t.min*(1000/NB)),"\n")
if (save_results) {
filename <- file.path(output_dir,
paste0("gbsg_results_B=",
format(NB),
".RData"))
save(fs_bc, fs, file = filename)
cat("\nResults saved to:", filename, "\n")
}
load("~/Library/CloudStorage/OneDrive-MerckSharp&DohmeLLC/documents/GitHub/forestsearch/Vignettes/results/gbsg_results_B=1000.RData")
sg_tab <- fs_bc$summary$table
sg_tab
fs_bc$summary$plots$combined
library(devtools)
unlink("man/*.Rd")
devtools::document()
rm(list=ls())
.rs.restartR()
# Set options
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE,
fig.align = 'center',
fig.retina = 2
)
# Load required libraries
library(survival)
library(knitr)
library(kableExtra)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
library(broom)
library(gridExtra)
library(weightedsurv)
library(forestsearch)
library(doFuture)
library(doRNG)
# Set theme for plots
theme_set(theme_minimal(base_size = 12))
# library(devtools)
# install_github("larry-leon/forestsearch")
# install_github("larry-leon/weightedsurv")
library(forestsearch)
load("~/Library/CloudStorage/OneDrive-MerckSharp&DohmeLLC/documents/GitHub/forestsearch/Vignettes/results/gbsg_results_B=1000.RData")
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
sg_tab <- summaries$table
sg_tab
load("~/Library/CloudStorage/OneDrive-MerckSharp&DohmeLLC/documents/GitHub/forestsearch/Vignettes/results/sim_gbsg_example_B=30.RData")
names(fs)
fs$sg.harm
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
sg_tab <- summaries$table
sg_tab
sg_tab
event_summary <- summarize_bootstrap_events(fs_bc, threshold = 12)
summaries$diagnostics_table_gt
summaries$subgroup_summary$original_agreement
summaries$subgroup_summary$factor_presence
summaries$subgroup_summary$agreement
summaries$subgroup_summary$factor_presence_specific
fs_bc$summary$plots$combined
devtools::document()
devtools::load_all()
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
sg_tab <- summaries$table
sg_tab
sg_tab
sg_tab
event_summary <- summarize_bootstrap_events(fs_bc, threshold = 12)
summaries$diagnostics_table_gt
summaries$subgroup_summary$original_agreement
summaries$subgroup_summary$agreement
summaries$subgroup_summary$factor_presence
summaries$subgroup_summary$factor_presence_specific
fs_bc$summary$plots$combined
devtools::document()
devtools::load_all()
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
sg_tab <- summaries$table
sg_tab
event_summary <- summarize_bootstrap_events(fs_bc, threshold = 12)
summaries$diagnostics_table_gt
summaries$subgroup_summary$original_agreement
summaries$subgroup_summary$factor_presence
summaries$subgroup_summary$factor_presence_specific
summaries$plots$combined
names(summaries)
names(summaries$subgroup_summary)
unlink("man/*.Rd")
devtools::document()
devtools::load_all()
#load("results//sim_gbsg_example_B=1000.RData")
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
sg_tab <- summaries$table
sg_tab
event_summary <- summarize_bootstrap_events(fs_bc, threshold = 12)
summaries$diagnostics_table_gt
summaries$subgroup_summary$original_agreement
summaries$subgroup_summary$agreement
summaries$subgroup_summary$factor_presence
summaries$subgroup_summary$factor_presence_specific
summaries$plots$combined
unlink("man/*.Rd")
devtools::document()
devtools::document()
unlink("man/*.Rd")
devtools::document()
devtools::load_all()
load("~/Library/CloudStorage/OneDrive-MerckSharp&DohmeLLC/documents/GitHub/forestsearch/vignettes/working/results/sim_gbsg_example_B=10.RData")
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
sg_tab <- summaries$table
sg_tab
summaries$subgroup_summary$original_agreement
summaries$subgroup_summary$agreement
summaries$subgroup_summary$agreement
names(fs)
fs$sg.harm
args(summarize_bootstrap_subgroups)
names(summaries)
names(summaries$subgroup_summary)
devtools::load_all()
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
devtools::load_all()
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
unlink("man/*.Rd")
devtools::document()
devtools::load_all()
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
sg_tab <- summaries$table
sg_tab
summaries$diagnostics_table_gt
summaries$subgroup_summary$original_agreement
summaries$subgroup_summary$agreement
devtools::document()
devtools::load_all()
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
devtools::document()
devtools::load_all()
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
devtools::document()
devtools::load_all()
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
devtools::document()
devtools::load_all()
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
devtools::document()
devtools::load_all()
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
args(summarize_bootstrap_subgroups)
devtools::document()
devtools::load_all()
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
devtools::document()
devtools::load_all()
summaries <- summarize_bootstrap_results(
sgharm = fs$sg.harm,
boot_results = fs_bc,
create_plots = TRUE,
est.scale = "hr"
)
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
unlink("man/*.Rd")
devtools::document()
